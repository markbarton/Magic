<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import images.ImageAsset;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			
			import org.osflash.signals.Signal;
			
			import shinydesign.boilerroom.model.ApplicationConfigModel;
			
			[Bindable]
			public var logData:ArrayCollection; 
			
			[Bindable]		
			public var appConfigModel:ApplicationConfigModel;
			
			public var tmpSignal:Signal=new Signal();
			public var buttonSignal:Signal=new Signal();
			
			public function getLabelColor(level:Number):Number
			{
				switch(level)
				{
					case 8:
						return 0xff0000;
					default:
						return 0x000000;
				}
			}
			
			public function getIcon(level:Number):Class{
				var tmpClass:Class;
				
				switch(level)
				{
					case 1:
						tmpClass= images.ImageAsset.logInformation; 
						break;
					case 2:
						tmpClass=images.ImageAsset.logExclamation;
						break;
					case 4:
						tmpClass= images.ImageAsset.logWarn;
						break;
					case 8:
						tmpClass= images.ImageAsset.logBug;
						break;	
					default:
				}
				return tmpClass;
				
			}
			
			private function wordFilterChange():void{
				tmpSignal.dispatch();
			}
			
			protected function allButton_clickHandler(event:MouseEvent):void
			{
				buttonSignal.dispatch(event.target);
			}
			
			private function datagridDoubleClickHandler():void
			{
				var popup:IFlexDisplayObject =  PopUpManager.createPopUp(Application.application as DisplayObject, LogDetails, true);
		//		(popup as LogDetails).setItem(dg.selectedItem); 
				PopUpManager.centerPopUp(popup);
			}
			
			/***
			private const SERVER:String = "rtmfp://stratus.adobe.com/";
			private const DEVKEY:String = "e274e68c5db54e78057989a9-e3f6b0d2a3e5";
			
			private var nc:NetConnection;
			private var netGroup:NetGroup;
			
			[Bindable]
			private var user:String;
			
			[Bindable]
			private var connected:Boolean = false;
			
			private function connect():void{
				nc = new NetConnection();
				nc.addEventListener(NetStatusEvent.NET_STATUS,netStatus);
				nc.connect(SERVER+DEVKEY);	
			}
			
			private function netStatus(event:NetStatusEvent):void{
				write(event.info.code);
				
				switch(event.info.code){
					case "NetConnection.Connect.Success":
						setupGroup()
						break;
					
					case "NetGroup.Connect.Success":
						connected = true;
						
						break;
					
					case "NetGroup.Posting.Notify":
						receiveMessage(event.info.message);
						break;
				}
			}
			
			private function setupGroup():void{
				var groupspec:GroupSpecifier = new GroupSpecifier("myGroup/g1");
				groupspec.serverChannelEnabled = true;
				groupspec.postingEnabled = true;
				
				trace("Groupspec: "+groupspec.groupspecWithAuthorizations());
				
				netGroup = new NetGroup(nc,groupspec.groupspecWithAuthorizations());
				netGroup.addEventListener(NetStatusEvent.NET_STATUS,netStatus);
				
				
				user = "user"+Math.round(Math.random()*10000);
			}
			
			private var sequence:uint = 0;
			
			private function sendMessage():void{
				
				var message:Object = new Object();
				message.sender = netGroup.convertPeerIDToGroupAddress(nc.nearID);
				//message.sequence = sequence++;
				message.user = txtUser.text;
				message.text = txtMessage.text;
				
				
				netGroup.post(message);
				receiveMessage(message);
				
				txtMessage.text = "";
			}
			
			private function receiveMessage(message:Object):void{
				write(message.user+": "+message.text);
			}
			
			private function write(txt:String):void{
				txtHistory.text += txt+"\n";
			}
***/
			
		]]>
	</fx:Script>
	<s:HGroup>
		
		<!---
	<s:VGroup width="100%" height="100%">
		<s:HGroup gap="1" width="100%" id="logButtons" verticalAlign="middle">
			<s:Button  label="All" id="allButton" width="40" click="allButton_clickHandler(event)"/>
			<s:Button  id="debugButton" icon="{images.ImageAsset.logInformation}" width="32" click="allButton_clickHandler(event)"/>
			<s:Button id="infoButton" icon="{images.ImageAsset.logExclamation}" width="32" click="allButton_clickHandler(event)"/>
			<s:Button id="warnButton" icon="{images.ImageAsset.logWarn}" width="32" click="allButton_clickHandler(event)"/>
			<s:Button id="errorButton" icon="{images.ImageAsset.logBug}" width="32" click="allButton_clickHandler(event)"/>
			<s:Label text="Word filter:"  paddingLeft="20" paddingRight="5"/>
			<s:TextInput id="wordFilter"  color="#000000" toolTip="Filter the list of log messages..." textInput="{wordFilterChange()}" change="{wordFilterChange()}" focusOut="{wordFilterChange()}"  />
			
		</s:HGroup>
	<s:Scroller width="100%" height="100%">
		<s:Group>
			
	<s:DataGrid width="100%" height="100%"  rowHeight="24"  variableRowHeight="false" requestedRowCount="20" right="10" left="10" dataProvider="{logData}" id="dg" doubleClickEnabled="true" doubleClick="{datagridDoubleClickHandler()}">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="index" headerText="#"  >
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" paddingLeft="5">
								<s:Label color="{outerDocument.getLabelColor(data.level)}" text="{data.index}"/>			
							</s:VGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="index" >
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:VGroup horizontalAlign="center" verticalAlign="middle" height="100%" width="100%" paddingLeft="5">
									<s:BitmapImage source="{outerDocument.getIcon(data.level)}"	/>		
								</s:VGroup>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="time" headerText="Time" minWidth="60" >
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:VGroup horizontalAlign="left" verticalAlign="middle" height="100%" width="100%" paddingLeft="5">
									<s:Label color="{outerDocument.getLabelColor(data.level)}" text="{data.time}"/>			
								</s:VGroup>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="flashTime" headerText="flashTime" minWidth="80" >
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:VGroup horizontalAlign="left" verticalAlign="middle" height="100%" width="100%" paddingLeft="5">
									<s:Label color="{outerDocument.getLabelColor(data.level)}" text="{data.flashTime}"/>			
								</s:VGroup>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="typeLevel" headerText="typeLevel" minWidth="100" >
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:VGroup horizontalAlign="left" verticalAlign="middle" height="100%" width="100%" paddingLeft="5">
									<s:Label color="{outerDocument.getLabelColor(data.level)}" text="{data.typeLevel}"/>			
								</s:VGroup>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="message" headerText="Message" minWidth="400">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:VGroup horizontalAlign="left" verticalAlign="middle" height="100%" width="100%" paddingLeft="5" paddingTop="5"  paddingBottom="5" clipAndEnableScrolling="true">
									<s:Label color="{outerDocument.getLabelColor(data.level)}" text="{data.message}" />			
								</s:VGroup>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
		</s:Group>

	</s:Scroller>	
		
	</s:VGroup>
	!-->
		<!--Now do application config value -->
		<s:VGroup>
			<!---
			<s:TextArea id="txtHistory"/>
			<s:TextInput id="txtUser" text="{user}" />
			<s:TextInput  id="txtMessage" enter="sendMessage()"/>
			<s:Button label="Send" click="sendMessage()" enabled="{connected}"/>
			-->
		<s:Form>
			<s:FormHeading label="Application Configuration"/>
			
			<s:FormItem label="Version">
				<s:Label text="{appConfigModel.applicationConfig.Version}" />
			</s:FormItem>
			<s:FormItem label="Server Endpoint">
				<s:Label text="{appConfigModel.applicationConfig.RemoteDominoServer}" />
			</s:FormItem>
			<s:FormItem label="Server Endpoints">
				<s:Label text="{appConfigModel.applicationConfig.URLEndPointsString}" />
			</s:FormItem>
			
		</s:Form>
		</s:VGroup>
		
	</s:HGroup>
	
	
</s:Group>
